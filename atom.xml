<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Just4fun</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://coolrc.me/"/>
  <updated>2021-05-27T08:33:30.000Z</updated>
  <id>https://coolrc.me/</id>
  
  <author>
    <name>coolrc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你们这些说西北大学城乡规划系董欣老师论文剽窃的能不能闭嘴啊</title>
    <link href="https://coolrc.me/2021/05/27/202105271633/"/>
    <id>https://coolrc.me/2021/05/27/202105271633/</id>
    <published>2021-05-27T08:33:30.000Z</published>
    <updated>2021-05-27T08:33:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>读书人的事情不能叫剽窃，叫引用<br>—董乙己: <a href="https://env.nwu.edu.cn/info/1134/1683.htm" target="_blank" rel="noopener">https://env.nwu.edu.cn/info/1134/1683.htm</a></p></blockquote><a id="more"></a><blockquote><p>真心不知道你们以贬低董老师为快感的心态是来自于自卑，还是所谓的伦理道德！</p></blockquote><blockquote><p>有本事你现在也抄，有本事你比他更红！弱肉强食的年代，这就是游戏规则。</p></blockquote><blockquote><p>董老师一到教室，所有学生便都看着他笑，有的叫道，“董老师，你又抄袭了！”他不回答，对柜里说，“要两本社会调查、一本交通创新。”便排出校园卡。他们又故意的高声嚷道，“你一定又抄了人家的东西了！”董老师睁大眼睛说，“你怎么这样凭空污人清白……”“什么清白？我前天亲眼见你偷了15级的社会调查，标点符号都抄了，被人吊着骂。”董老师便涨红了脸，额上的青筋条条绽出(并没有，肥肉太多看不到青筋)，争辩道，“参考不能算抄……论文！……搞学术的事，能算抄么？”接连便是难懂的话，什么“我是指导老师”，什么“我都勉为其难加了个致谢了”之类，引得众人都哄笑起来：教室内外充满了快活的空气。</p></blockquote><p>西北大学董欣被污蔑抄袭是怎么回事呢？西北大学董欣相信大家都很熟悉，但是被人污蔑抄袭是怎么回事呢？下面就让小编带大家一起了解吧。 </p><h3 id="起"><a href="#起" class="headerlink" title="起"></a>起</h3><p>“如果不是有一天xxx给我发了一个pdf，我都不知道我们的东西被抄了，我当时都惊呆了。”<br>—某”受害者”1号</p><p>“他偷偷的抄了就算了，还要最后写个致谢，这简直就是在嘲讽我们!”<br>—某”受害者”2号</p><p>“我真的服了，我们的研究方法懂的都懂，数据都是编的，没想到这都被他抄了还能发表，审稿的人没长脑子吗?”<br>—某”受害者”3号</p><p>以上是前线记者为您带来的最新采访。可以看到，”受害者”的心情都相当激动!!!</p><h3 id="承"><a href="#承" class="headerlink" title="承"></a>承</h3><p>事情大概是这样的，董欣老师是社会调查课程作业指导老师，做事认真负责，对学生要求太过严格，导致有人心生怨忿。然后过了两年，等他们快毕业的时候，有人在业界知名的规划师杂志看到了董老师的论文，和他们的内容略有雷同，而且文章作者是董老师和他的研究生，和上述几位”受害者”毫无关系。于是有人暗中制造谣言，导致几位受害者产生了无端联想，认为自己的东西被抄了，实在是非常可笑。</p><p>废话不多说，下面就和小编一起来看看董老师的高作究竟和几位所谓”受害者”的作品有什么天壤之别吧!</p><p><img src="https://pic.imgdb.cn/item/60b8de138355f7f718dd00b2.jpg" alt="完全看不出平面图哪里像了">完全看不出平面图哪里像了</p><p><img src="https://pic.imgdb.cn/item/60b8def68355f7f718e35cf3.jpg" alt="董老师原创的研究方法">董老师原创的研究方法</p><p><img src="https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/superbed/2021/06/03/60b8df268355f7f718e449a5.jpg" alt="同学们瞎编的研究方法">同学们瞎编的研究方法</p><p><img src="https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/superbed/2021/06/03/60b8df928355f7f718e70863.jpg" alt="">像你个鬼啊</p><p>众所周知，董老师和他的研究生都是高级知识分子，有严密完整的研究体系。一个博士三个硕士的论文竟然和几个初出茅庐的学生的算法对上了，只能说，可能这就是缘分吧。如果非要说是抄袭，谁抄袭谁的应该不用多说吧。</p><p><a href="https://pic.imgdb.cn/item/60b8e20a8355f7f718f9cf1c.png" target="_blank" rel="noopener">https://pic.imgdb.cn/item/60b8e20a8355f7f718f9cf1c.png</a></p><h3 id="转"><a href="#转" class="headerlink" title="转"></a>转</h3><p>以上的”受害者”只是九牛一毛而已，不得不说，董老师是个幸运的人，这样的巧合已经多次发生了。</p><p><img src="https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/superbed/2021/06/03/60b8e4ac8355f7f718107fae.jpg" alt=""><br>(上图为18年社会调查，下图为21年挑战杯。)</p><p>一样的题目，一样的研究区域，竟然有两拨不同的学生都研究同一个社会问题，虽然学长学姐们毕业了，但是他们的研究课题还有人在继续，可能这就是西北大学的传承吧。<br><img src="https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/superbed/2021/06/03/60b8e5ec8355f7f718255670.jpg" alt=""></p><p>虽然论文是同学们写的，但是署名都加上了董老师，还要放在第一个，什么叫德高望重啊!<br><img src="https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/superbed/2021/06/03/60b8e6c88355f7f718358520.jpg" alt=""></p><h3 id="合"><a href="#合" class="headerlink" title="合"></a>合</h3><p>写到此处，小编想起来当时和董老师合作时，董老师对学生们的嘱咐：”你们如果把作品发给别的学校的人看，这门课程直接不及格”。让人不禁感叹，董老师果然深谋远虑啊，要是万一发出去了，外校的同学看见西北大学学生的作品竟然和老师发的论文一样，一定会觉得西北大学的学生都是些吸血鬼，自己跟个懒狗一样，只会抄老师做好的东西应付竞赛!董老师还是懂的为学生着想啊，不愧是姓懂的。<br><img src="https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/superbed/2021/06/03/60b8e0888355f7f718ee23bb.jpg" alt=""></p><p>西北大学董欣被污蔑抄袭，其实就是被污蔑抄袭了。那么西北大学董欣为什么会被污蔑抄袭，相信大家都很好奇是怎么回事。大家可能会感到很惊讶，西北大学董欣怎么会被污蔑抄袭呢？但事实就是这样，小编也感到非常惊讶。那么这就是关于西北大学董欣被污蔑抄袭的事情了，大家有没有觉得很神奇呢？</p><p>以上的事情，明眼人都可以看出，其实就是董老师论文的图片和学生的比较相似，被误认为抄袭了，但是图片是数字文件，很难证明所有权，就导致董老师无处维权，实在是太郁闷了。所以，为了防止这样的事件再次发生，下一篇文章中，小编将会教大家使用简单的算法为图像加上自己的数字水印。这样以后有人再污蔑董老师，董老师就可以提取图片中的数字水印维权辣。</p><p>看了今天的内容，大家有什么想法，欢迎在评论区告诉小编一起讨论哦。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;读书人的事情不能叫剽窃，叫引用&lt;br&gt;—董乙己: &lt;a href=&quot;https://env.nwu.edu.cn/info/1134/1683.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://env.nwu.edu.cn/info/1134/1683.htm&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="董欣" scheme="https://coolrc.me/tags/%E8%91%A3%E6%AC%A3/"/>
    
      <category term="无耻之徒" scheme="https://coolrc.me/tags/%E6%97%A0%E8%80%BB%E4%B9%8B%E5%BE%92/"/>
    
      <category term="城市规划" scheme="https://coolrc.me/tags/%E5%9F%8E%E5%B8%82%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>远程启动不支持网络唤醒的pc</title>
    <link href="https://coolrc.me/2020/09/16/2020091620/"/>
    <id>https://coolrc.me/2020/09/16/2020091620/</id>
    <published>2020-09-16T12:59:58.000Z</published>
    <updated>2020-11-14T07:59:58.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="update-修改了代码，现在可以实时检测电脑是否在线"><a href="#update-修改了代码，现在可以实时检测电脑是否在线" class="headerlink" title="update: 修改了代码，现在可以实时检测电脑是否在线"></a>update: 修改了代码，现在可以实时检测电脑是否在线</h2><blockquote><p><code>Wake-on-LAN</code>简称<code>WOL</code>或<code>WoL</code>，中文多译为“网络唤醒”、“远程唤醒”技术。WOL是一种技术，同时也是该技术的规范标准，它的功效在于让休眠状态或关机状态的电脑，透过局域网的另一台电脑对其发令，使其唤醒、恢复成运作状态，或从关机状态转成引导状态。</p></blockquote><p>对于支持网络唤醒的主机，我们可以使用路由器的网络唤醒功能来开机。但是网络唤醒需要的是网卡和主板的支持，还需要你有公网ip或者路由器支持远程唤醒，任何一项不支持都不能正常启动。而且即使支持了网络唤醒，万一遇到了意外断电，有的主板也不能正常开机。<a id="more"></a>那么有什么办法能保证网络唤醒一定成功呢？</p><p>最简单的方法是智能插座，在BIOS里设置好主板通电就开机，然后远程控制智能插座就可以了。这种方法最简单，但是笔记本是有电池的，所以BIOS里一般没有通电开机的选项，这个办法就行不通了。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>那么怎么办呢，首先我们来了解一下电脑的启动流程：<br>开机按键一端和电源14脚或16脚相接，另一端接地，当我们按下电源按钮时，电源的14或16脚接地，然后就会触发电源开始工作，向设备供电。（这种说法只是为了方便理解，实际流程很复杂）</p><p>既然知道了这个原理，那我们只要让电源引脚接地，模拟开机键按下的过程，不就能开机了吗。</p><p>为了实现这个功能，需要以下材料：</p><ul><li>一个esp8266，用于联网</li><li>一个esp8266 relay，用于短接电源引脚，</li><li>一个usb转ttl，同于给esp8266刷写程序</li><li>电烙铁，用于引出开机线路</li><li>一个万用表，用于测试</li><li>esp8266开发软件，我用的是arduino IDE</li></ul><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p>首先需要的，当然是拆开电脑，找到对应的启动引脚了，台式机的话很简单，看电源按钮排线就行，笔记本的话，可以直接看电源按钮的线路，也可以找根线，一端接地，一端在电源按钮排线上一个一个短接试过去。</p><p>找到引脚后，就要想办法用电烙铁引过来地线和电源线，这里推荐用耳机线，很软很细不容易断，不会让设备外壳合不上。</p><p>然后把这两根线接到继电器的公共口和常闭口就行。</p><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><p>接着就要写程序远程控制继电器开合。推荐使用点灯科技的<code>blinker</code>SDK,配合手机app可以很方便的控制。blinker使用方法请自行搜索，</p><p>新建一个blinker设备，获得Secret Key，然后开始编程：<br>需要用到的库：<a href="https://github.com/dancol90/ESP8266Ping" target="_blank" rel="noopener">ESP8266Ping</a>,注意不是arduino仓库里的那个ESP8266-ping，这个要自己下载放到libraries文件夹里。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLINKER_WIFI</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO 0 <span class="comment">//继电器引脚</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLINKER_MIOT_OUTLET</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Blinker.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ESP8266Ping.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ESP8266WiFi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> pwstate = <span class="literal">false</span>;<span class="comment">//电源状态</span></span><br><span class="line"><span class="function">IPAddress <span class="title">IP</span> <span class="params">(<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">104</span>)</span></span>; <span class="comment">//电脑ip，检测是否开机</span></span><br><span class="line"><span class="keyword">char</span> auth[] = <span class="string">"你的key"</span>;<span class="comment">//app中获取到的Secret Key(密钥)</span></span><br><span class="line"><span class="keyword">char</span> ssid[] = <span class="string">"qwweqrq"</span>; <span class="comment">//你的wifi 名称</span></span><br><span class="line"><span class="keyword">char</span> pswd[] = <span class="string">"password"</span>; <span class="comment">//你的wifi 密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建组件对象</span></span><br><span class="line"><span class="function">BlinkerButton <span class="title">Button1</span><span class="params">(<span class="string">"btn-abc"</span>)</span></span>;<span class="comment">//注意：内容替换为app中添加按键的数据键名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按下BlinkerAPP按键即会执行该函数</span></span><br><span class="line"><span class="comment">// 按下按键即会执行该函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">statusreport</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (pwstate)</span><br><span class="line">  &#123;</span><br><span class="line">    Button1.print(<span class="string">"on"</span>);</span><br><span class="line">    BlinkerMIOT.powerState(<span class="string">"on"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    Button1.print(<span class="string">"off"</span>);</span><br><span class="line">    BlinkerMIOT.powerState(<span class="string">"off"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  BlinkerMIOT.print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isonline</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//  for (int i=0;i&lt;3;i++)</span></span><br><span class="line"><span class="comment">//  &#123;</span></span><br><span class="line">    <span class="keyword">if</span> (Ping.ping(IP)) &#123;</span><br><span class="line">      <span class="comment">//BLINKER_LOG("ping成功！",IP);</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    delay(3000);</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line">  <span class="comment">//BLINKER_LOG("ping失败！",IP);</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heartbeat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isonline()) pwstate = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> pwstate = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">//BLINKER_LOG("电源状态",pwstate);</span></span><br><span class="line">  statusreport();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">waiteforpwstate</span><span class="params">(<span class="keyword">bool</span> pw)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; pw != (pwstate = isonline()) &amp;&amp; i &lt;= <span class="number">10</span>; i++) <span class="comment">//不满足条件就持续ping，直到30次</span></span><br><span class="line">  &#123;</span><br><span class="line">    delay(<span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">click</span><span class="params">(<span class="keyword">const</span> String &amp; state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>((state == BLINKER_CMD_ON &amp;&amp;pwstate)||(state == BLINKER_CMD_OFF &amp;&amp; !pwstate)) <span class="keyword">return</span>; <span class="comment">//状态不变的话就不要按下按钮</span></span><br><span class="line">  <span class="comment">//长按1.5s开机</span></span><br><span class="line">  digitalWrite(GPIO, LOW);</span><br><span class="line">  delay(<span class="number">1500</span>);</span><br><span class="line">  digitalWrite(GPIO, HIGH);</span><br><span class="line">  <span class="keyword">if</span> (state == BLINKER_CMD_ON) waiteforpwstate(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">else</span> waiteforpwstate(<span class="literal">false</span>);</span><br><span class="line">  statusreport();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">miotPowerState</span><span class="params">(<span class="keyword">const</span> String &amp; state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  click(state);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">button1_callback</span><span class="params">(<span class="keyword">const</span> String &amp; state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  click(state);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">miotQuery</span><span class="params">(<span class="keyword">int32_t</span> queryCode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  statusreport();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 初始化串口，并开启调试信息，调试用可以删除</span></span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  BLINKER_DEBUG.stream(Serial);</span><br><span class="line">  <span class="comment">// 初始化IO</span></span><br><span class="line">  pinMode(GPIO, OUTPUT);</span><br><span class="line">  digitalWrite(GPIO, HIGH);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//指示灯</span></span><br><span class="line">  <span class="comment">//digitalWrite(LED_BUILTIN, LOW);</span></span><br><span class="line">  <span class="comment">//delay(1500);</span></span><br><span class="line">  <span class="comment">//digitalWrite(LED_BUILTIN, HIGH);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化blinker</span></span><br><span class="line">  Blinker.begin(auth, ssid, pswd);</span><br><span class="line">  Button1.attach(button1_callback);</span><br><span class="line">  Blinker.attachHeartbeat(heartbeat);</span><br><span class="line">  BlinkerMIOT.attachQuery(miotQuery);</span><br><span class="line">  BlinkerMIOT.attachPowerState(miotPowerState);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Blinker.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p class="tip"><del>Blinker还可以支持小爱同学远程控制，不过我懒得写了，以后再补上</del></p><br>已经添加小爱同学代码，不过由于开关机需要一定时间，小爱同学不能及时感知到操作是否成功。<p></p><p>程序的刷写方法可以参考这里：<a href="https://www.diyhobi.com/flash-program-esp-01-using-usb-serial-adapter/" target="_blank" rel="noopener">https://www.diyhobi.com/flash-program-esp-01-using-usb-serial-adapter/</a></p><p>接法是这样的：<br><img src="https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/superbed/2020/09/16/5f6214d9160a154a67895e9a.jpg" alt=""></p><p>写好之后，在blinker app立面编辑界面，新增一个按钮，数据键名为<code>btn-abc</code>,<del>类型为普通按键</del>(现在可以选择开关按键，样式选择第二个滑块按钮可以看到机器开关状态)。然后就可以用了<br><img src="https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/superbed/2020/09/16/5f621601160a154a6789ce67.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;update-修改了代码，现在可以实时检测电脑是否在线&quot;&gt;&lt;a href=&quot;#update-修改了代码，现在可以实时检测电脑是否在线&quot; class=&quot;headerlink&quot; title=&quot;update: 修改了代码，现在可以实时检测电脑是否在线&quot;&gt;&lt;/a&gt;update: 修改了代码，现在可以实时检测电脑是否在线&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Wake-on-LAN&lt;/code&gt;简称&lt;code&gt;WOL&lt;/code&gt;或&lt;code&gt;WoL&lt;/code&gt;，中文多译为“网络唤醒”、“远程唤醒”技术。WOL是一种技术，同时也是该技术的规范标准，它的功效在于让休眠状态或关机状态的电脑，透过局域网的另一台电脑对其发令，使其唤醒、恢复成运作状态，或从关机状态转成引导状态。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于支持网络唤醒的主机，我们可以使用路由器的网络唤醒功能来开机。但是网络唤醒需要的是网卡和主板的支持，还需要你有公网ip或者路由器支持远程唤醒，任何一项不支持都不能正常启动。而且即使支持了网络唤醒，万一遇到了意外断电，有的主板也不能正常开机。
    
    </summary>
    
    
      <category term="开机棒" scheme="https://coolrc.me/tags/%E5%BC%80%E6%9C%BA%E6%A3%92/"/>
    
      <category term="硬件" scheme="https://coolrc.me/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>添加windows-terminal到右键菜单</title>
    <link href="https://coolrc.me/2020/09/13/2020091321/"/>
    <id>https://coolrc.me/2020/09/13/2020091321/</id>
    <published>2020-09-13T13:51:56.000Z</published>
    <updated>2020-09-13T13:51:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>新版的<code>Windows terminal</code>很好用，不过不能像powershell那样右键直接在文件夹打开。我们可以通过修改注册表的方式手动添加右键菜单。<a id="more"></a></p><h2 id="了解参数"><a href="#了解参数" class="headerlink" title="了解参数"></a>了解参数</h2><p>首先，右键菜单的地址在：<code>计算机\HKEY_CLASSES_ROOT\Directory\Background\shell\</code>这个文件夹下面，我们在这里添加键值就能在右键菜单看到了。</p><p>再来看<code>Windows terminal</code>的参数：</p><p><code>-d</code>参数可以指定指定打开的目录，所以这里我们使用<code>C:\Users\你的用户名\AppData\Local\Microsoft\WindowsApps\wt.exe -d .</code>这个命令就能在当前文件夹打开<code>Windows terminal</code>。</p><p><code>-p</code>参数可以指定要使用哪个shell，shell的名字就是就是<code>Windows terminal</code>里面配置的<code>name</code>参数，所以通过<code>C:\Users\你的用户名\AppData\Local\Microsoft\WindowsApps\wt.exe -p &quot;Windows PowerShell&quot; -d .</code>这个命令就能在当前文件夹使用<code>Windows PowerShell</code>来打开<code>Windows terminal</code>。</p><h2 id="配置注册表"><a href="#配置注册表" class="headerlink" title="配置注册表"></a>配置注册表</h2><p>有了上述的前置知识，我们就知道应该怎么配置右键菜单了。比如用默认shell打开：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt]</span><br><span class="line">@=&quot;Windows Terminal Here&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt\command]</span><br><span class="line">@=&quot;C:\\Users\\你的用户名\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe -d .&quot;</span><br></pre></td></tr></table></figure><p>用<code>wsl2</code>打开：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt]</span><br><span class="line">@=&quot;WSL Here&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt\command]</span><br><span class="line">@=&quot;C:\\Users\\你的用户名\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe -p ubuntu -d .&quot;</span><br></pre></td></tr></table></figure><p>要让右键菜单默认隐藏，按shift才能出现的话，可以添加一行<code>&quot;Extended&quot;=&quot;&quot;</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt]</span><br><span class="line">@=&quot;Windows Terminal Here&quot;</span><br><span class="line">&quot;Extended&quot;=&quot;&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt\command]</span><br><span class="line">@=&quot;C:\\Users\\你的用户名\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe -d .&quot;</span><br></pre></td></tr></table></figure><p>把上述代码保存为<code>.reg</code>文件运行即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新版的&lt;code&gt;Windows terminal&lt;/code&gt;很好用，不过不能像powershell那样右键直接在文件夹打开。我们可以通过修改注册表的方式手动添加右键菜单。
    
    </summary>
    
    
      <category term="windows" scheme="https://coolrc.me/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>arm平台安装docker-compose</title>
    <link href="https://coolrc.me/2020/03/21/202003212046/"/>
    <id>https://coolrc.me/2020/03/21/202003212046/</id>
    <published>2020-03-21T12:46:26.000Z</published>
    <updated>2020-03-21T12:46:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/superbed/2020/03/21/5e76134f9d7d586a540ff542.jpg" alt=""><br>github上的仓库里没有编译arm版本的docker-compose，需要自己编译，这里记录编译的办法。<br><a id="more"></a><br>我使用的系统是<code>Debian buster</code>,首先安装docker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br></pre></td></tr></table></figure></p><p>接下来安装docker-compose，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python python-pip python-dev python-setuptools libffi-dev</span><br><span class="line">pip install pip -U</span><br><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">sudo pip install docker-compose</span><br></pre></td></tr></table></figure><p>然后等待一万年。。。。。让pip自动帮你编译安装就可以用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/superbed/2020/03/21/5e76134f9d7d586a540ff542.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;github上的仓库里没有编译arm版本的docker-compose，需要自己编译，这里记录编译的办法。&lt;br&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://coolrc.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu配置postfix使用SMTP发送邮件</title>
    <link href="https://coolrc.me/2020/03/21/202003211618/"/>
    <id>https://coolrc.me/2020/03/21/202003211618/</id>
    <published>2020-03-21T08:18:13.000Z</published>
    <updated>2020-03-21T08:18:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/superbed/2020/03/21/5e75d31c9d7d586a54da48dc.jpg" alt=""><br>昨天配置了个定时任务需要发送邮件确认是否执行成功，就折腾了一下Linux的邮件，走了很多弯路才搞成功，这里记录一下配置过程吧<a id="more"></a></p><p>主要参考的文章是:<a href="https://itlaws.cn/post/postfix-use-external-smtp/" target="_blank" rel="noopener">Postfix使用外部SMTP服务器发送邮件</a></p><p>接下来我补充一些注意事项</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mailutils</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/postfix/sasl_passwd</span><br><span class="line"><span class="comment">#写入SMTP账号密码</span></span><br><span class="line">[smtp.qq.com]:465 myEmail:password</span><br></pre></td></tr></table></figure><p>qq邮箱的密码需要在<code>设置-帐号</code>里生成授权码<br>然后加密<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo postmap /etc/postfix/sasl_passwd</span><br></pre></td></tr></table></figure></p><h3 id="映射发件人"><a href="#映射发件人" class="headerlink" title="映射发件人"></a>映射发件人</h3><p>默认是用你的用户名@主机名的方式发送邮件的，这样的邮件会被smtp服务器拒绝，所以要把发件人映射为你的qq邮箱地址</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/postfix/generic</span><br><span class="line"><span class="comment">#写入映射关系</span></span><br><span class="line">root@myhostname     12345678@qq.com</span><br></pre></td></tr></table></figure><p>myhostname是<code>/etc/postfix/main.cf</code>里面的<code>myhostname</code>。</p><p>加密<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo postmap /etc/postfix/generic</span><br></pre></td></tr></table></figure></p><p>###修改配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/postfix/main.cf</span><br><span class="line"></span><br><span class="line">#修改relayhost</span><br><span class="line">relayhost = [smtp.exmail.qq.com]:465</span><br><span class="line"></span><br><span class="line">#加入以下内容</span><br><span class="line"># enable SASL authentication</span><br><span class="line">smtp_sasl_auth_enable = yes</span><br><span class="line"></span><br><span class="line"># disallow methods that allow anonymous authentication.</span><br><span class="line">smtp_sasl_security_options = noanonymous</span><br><span class="line"></span><br><span class="line"># where to find sasl_passwd</span><br><span class="line">smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd</span><br><span class="line"></span><br><span class="line"># where to find generic</span><br><span class="line">smtp_generic_maps = hash:/etc/postfix/generic</span><br><span class="line"></span><br><span class="line"># Enable STARTTLS encryption</span><br><span class="line">smtp_use_tls = yes</span><br><span class="line"></span><br><span class="line"># where to find CA certificates</span><br><span class="line">smtp_tls_CAfile = /etc/ssl/certs/ca-certificates.crt</span><br><span class="line"></span><br><span class="line"># Enable tls encryption</span><br><span class="line">smtp_tls_wrappermode = yes</span><br><span class="line">smtp_tls_security_level = encrypt</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>接下来重启postfix就可以发信了<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service postfix restar</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"test"</span> | mail -s <span class="string">"hello"</span> 123@qq.com</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/superbed/2020/03/21/5e75d31c9d7d586a54da48dc.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;昨天配置了个定时任务需要发送邮件确认是否执行成功，就折腾了一下Linux的邮件，走了很多弯路才搞成功，这里记录一下配置过程吧
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>新建了个doh+dot服务器</title>
    <link href="https://coolrc.me/2020/02/05/202002051/"/>
    <id>https://coolrc.me/2020/02/05/202002051/</id>
    <published>2020-02-05T09:13:49.000Z</published>
    <updated>2020-02-05T09:13:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天geekdns的加密dns用不了了，于是今天就自己整了个dns服务器。<br>具体的地址就不发了，免得查水表，下面说一下搭建的步骤吧。<br><a id="more"></a><br>项目地址：<a href="https://github.com/coolrc136/Pcap_DNSProxy_docker/tree/overture" target="_blank" rel="noopener">https://github.com/coolrc136/Pcap_DNSProxy_docker/tree/overture</a><br>记得切换到overture分支</p><p>服务器要用的软件已经用<code>docker-compose</code>打包好了，pull下来直接跑就行。<br>我来说一下具体的结构吧，懒得画图了，直接用文字，很简单：</p><p>用户通过tls或者https向服务器请求dns</p><h3 id="tls"><a href="#tls" class="headerlink" title="tls"></a>tls</h3><p>如果是tls的话，仅仅是对tcp格式的dns请求进行了ssl加密而已，直接用nginx的stream模块进行tcp反代。然后dns请求传到overture，overture进行分流查询</p><h3 id="https"><a href="#https" class="headerlink" title="https"></a>https</h3><p>如果是https的话，dns请求是用json格式传输的，我们需要dns-over-https这个软件来进行协议转换。<br>首先nginx反代http请求到dns-over-https，然后dns-over-https把请求转换为普通的udp查询传给overture，再由overture发出请求。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>安卓手机在加密dns选项填上服务器域名或ip就行。</p><p>windows用Auroradns，主dns填入：https://域名/dns-query就可以</p><p><img src="https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/superbed/2020/02/05/5e3a8b842fb38b8c3cc68386.jpg" alt=""></p><p class="tip">更新：实际使用了两天，windows端还是<code>simple dnscrypt-proxy</code>好用,但是配置麻烦，这里不写了，具体使用方法看项目README：<a herf="https://github.com/coolrc136/Pcap_DNSProxy_docker/blob/overture/README.md">https://github.com/coolrc136/Pcap_DNSProxy_docker/blob/overture/README.md</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天geekdns的加密dns用不了了，于是今天就自己整了个dns服务器。&lt;br&gt;具体的地址就不发了，免得查水表，下面说一下搭建的步骤吧。&lt;br&gt;
    
    </summary>
    
    
      <category term="dns" scheme="https://coolrc.me/tags/dns/"/>
    
      <category term="doh" scheme="https://coolrc.me/tags/doh/"/>
    
      <category term="dot" scheme="https://coolrc.me/tags/dot/"/>
    
      <category term="dns-over-https" scheme="https://coolrc.me/tags/dns-over-https/"/>
    
      <category term="dns-over-tls" scheme="https://coolrc.me/tags/dns-over-tls/"/>
    
  </entry>
  
  <entry>
    <title>论如何保护安卓的DNS</title>
    <link href="https://coolrc.me/2019/07/16/201907161118/"/>
    <id>https://coolrc.me/2019/07/16/201907161118/</id>
    <published>2019-07-16T03:18:48.000Z</published>
    <updated>2019-07-16T03:18:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/superbed/2019/07/16/5d2d4c70451253d178527789.jpg" alt=""><br>传统的UDP DNS泄漏隐私，容易被篡改。尤其是隐私问题，你的运营商可以轻易知道你访问过哪些网站，想想都可怕。因此加密DNS显得尤为重要。<a id="more"></a><br>当然，DNS只是你访问互联网的第一个步骤而已，加密DNS并不能保证万无一失。HTTP自不必说，对于HTTPS，当你和服务器握手时，SNI也会暴露你访问的域名。但是，这并不代表加密dns没有用，至少在我朝网络环境下，可以保证DNS不被篡改，减少攻击面。</p><p class="tip">在TLS1.3中已经可以加密SNI了，可以通过在firefox中开启ESNI实现，但是需要服务端和客户端都支持，预计还要几年才能普及。</p><p>在PC上，加密dns很简单，只需要下载一个<a href="https://simplednscrypt.org" target="_blank" rel="noopener">SimpleDnsCrypt</a>,他就能自动帮你配好<code>dnscrypt-proxy</code>了。Linux的话，除了<code>dnscrypt-proxy</code>，还有<code>dns-overtls</code>和<code>dns-over-https</code>的各种软件可供选择。但是在安卓手机上，想要实现加密DNS就比较难了。</p><h2 id="dns-over-tls"><a href="#dns-over-tls" class="headerlink" title="dns-over-tls"></a>dns-over-tls</h2><p>从安卓9开始，就自带了加密dns功能，只要你在设置里填上合适的服务器地址就行，但是呢，这个自带的加密dns在使用代理时不会生效，如果你使用了SS，那么你还是会用SS里的DNS服务器明文查询，而且只能填一个域名，容易出故障。</p><h2 id="dnscrypt-proxy"><a href="#dnscrypt-proxy" class="headerlink" title="dnscrypt-proxy"></a>dnscrypt-proxy</h2><p>为了让全局DNS都能加密，这里就要使用一个<code>magisk</code>模块了，那就是<code>dnscrypt-proxy</code>。这个是<code>dnscrypt-proxy</code>的ARM版本，用<code>magisk</code>刷入，然后修改位于<code>/sdcard/dnscrypt-proxy</code>目录下的文件就能启用了。</p><p></p><p class="tip">为了方便配置，你可以在PC端用<code>SimpleDnsCrypt</code>配置好，然后把配置文件<code>dnscrypt-proxy.toml</code>复制过去。PC端默认监听53端口，建议修改为5353端口</p><br>这是我的配置文件：<p></p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server_names</span> = [<span class="string">"rubyfish-ea"</span>, <span class="string">"geekdns-doh-west"</span>, <span class="string">"geekdns-doh-north"</span>, <span class="string">"geekdns-doh-east"</span>]</span><br><span class="line"><span class="attr">listen_addresses</span> = [<span class="string">"127.0.0.1:53"</span>, <span class="string">"[::1]:53"</span>]</span><br><span class="line"><span class="attr">max_clients</span> = <span class="number">250</span></span><br><span class="line"><span class="attr">ipv4_servers</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">ipv6_servers</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">disabled_server_names</span> = []</span><br><span class="line"><span class="attr">refused_code_in_responses</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">dnscrypt_servers</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">doh_servers</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">require_dnssec</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">require_nolog</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">require_nofilter</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">daemonize</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">force_tcp</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">dnscrypt_ephemeral_keys</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">tls_disable_session_tickets</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">offline_mode</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">timeout</span> = <span class="number">2500</span></span><br><span class="line"><span class="attr">keepalive</span> = <span class="number">30</span></span><br><span class="line"><span class="attr">lb_estimator</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">netprobe_timeout</span> = <span class="number">60</span></span><br><span class="line"><span class="attr">netprobe_address</span> = <span class="string">"9.9.9.9:53"</span></span><br><span class="line"><span class="attr">log_level</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">use_syslog</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">cert_refresh_delay</span> = <span class="number">240</span></span><br><span class="line"><span class="attr">fallback_resolver</span> = <span class="string">"223.5.5.5:53"</span></span><br><span class="line"><span class="attr">ignore_system_dns</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">log_files_max_size</span> = <span class="number">10</span></span><br><span class="line"><span class="attr">log_files_max_age</span> = <span class="number">7</span></span><br><span class="line"><span class="attr">log_files_max_backups</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">block_ipv6</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">cache</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">cache_size</span> = <span class="number">256</span></span><br><span class="line"><span class="attr">cache_min_ttl</span> = <span class="number">600</span></span><br><span class="line"><span class="attr">cache_max_ttl</span> = <span class="number">86400</span></span><br><span class="line"><span class="attr">cache_neg_ttl</span> = <span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="section">[query_log]</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">"ltsv"</span></span><br><span class="line"></span><br><span class="line"><span class="section">[nx_log]</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">"ltsv"</span></span><br><span class="line"></span><br><span class="line"><span class="section">[blacklist]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ip_blacklist]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[sources]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[sources.public-resolvers]</span></span><br><span class="line"><span class="attr">urls</span> = [<span class="string">"https://raw.githubusercontent.com/DNSCrypt/dnscrypt-resolvers/master/v2/public-resolvers.md"</span>, <span class="string">"https://download.dnscrypt.info/resolvers-list/v2/public-resolvers.md"</span>]</span><br><span class="line"><span class="attr">minisign_key</span> = <span class="string">"RWQf6LRCGA9i53mlYecO4IzT51TGPpvWucNSCh1CBM0QTaLn73Y7GFO3"</span></span><br><span class="line"><span class="attr">cache_file</span> = <span class="string">"public-resolvers.md"</span></span><br><span class="line"><span class="attr">refresh_delay</span> = <span class="number">72</span></span><br><span class="line"><span class="attr">prefix</span> = <span class="string">""</span></span><br></pre></td></tr></table></figure><p>然后，你有两个选择，一是安装一个修改dns的app，将dns指向dnscrypt-proxy监听的地址，比如我这里是<code>127.0.0.1:5353</code>，填进去，然后app一般会启动一个vpn，用这个vpn上网就行。<br>如果不想用vpn，那么可以安装<a href="https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/files/CloudflareDNS4Magisk-v2.6.zip" target="_blank" rel="noopener">这个magisk模块</a>,这个模块会使用<code>iptables</code>把所有53端口的出口流量转到<code>127.0.0.1:5353</code>，也就是全局启用了<code>dnscrypt-proxy</code>。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>配置完dns后，我们来测试一下有没有成功,访问<a href="https://www.dnsleaktest.com/" target="_blank" rel="noopener">https://www.dnsleaktest.com/</a>或者<a href="http://nstool.netease.com/" target="_blank" rel="noopener">http://nstool.netease.com/</a>。如果看到的DNS和你在<code>dnscrypt-proxy</code>中配置的一样，恭喜你，你的DNS已经被加密了。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.hetianlab.com/html/news/news-2018042001.html" target="_blank" rel="noopener">浅析加密DNS</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/superbed/2019/07/16/5d2d4c70451253d178527789.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;传统的UDP DNS泄漏隐私，容易被篡改。尤其是隐私问题，你的运营商可以轻易知道你访问过哪些网站，想想都可怕。因此加密DNS显得尤为重要。
    
    </summary>
    
    
      <category term="手机" scheme="https://coolrc.me/tags/%E6%89%8B%E6%9C%BA/"/>
    
      <category term="DNS" scheme="https://coolrc.me/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>给波兰版MIUI用上国内主题</title>
    <link href="https://coolrc.me/2019/07/16/201907160958/"/>
    <id>https://coolrc.me/2019/07/16/201907160958/</id>
    <published>2019-07-16T01:58:29.000Z</published>
    <updated>2019-07-16T01:58:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>迫于各种原生的ROM BUG太多，昨天又刷回了MIUI。但是我的MIUI是波兰版的，里面自带的主题商店只有国外的主题，比较简陋。那想用回国内主题怎么办呢？<br><a id="more"></a></p><h3 id="optinon-1"><a href="#optinon-1" class="headerlink" title="optinon 1"></a>optinon 1</h3><p>首先想到的肯定是把国内版的主题商店移植回来，这样就能一直用了，但是调查后才发现，用国内版主题商店需要修改<code>build.prop</code>,这样的话，就会让一些广告重新出现，所以这个方案对我来说并不行。</p><h3 id="option-2"><a href="#option-2" class="headerlink" title="option 2"></a>option 2</h3><p>其实我只是需要安装一个主题而已，为何不直接导入MTZ呢？这时候就要用到一个油猴插件，那就是<a href="https://greasyfork.org/en/scripts/374648-miui-%E4%B8%BB%E9%A2%98%E4%B8%8B%E8%BD%BD%E5%99%A8" target="_blank" rel="noopener">MIUI主题下载器</a>。安装这个插件，前往<a href="http://zhuti.xiaomi.com" target="_blank" rel="noopener">http://zhuti.xiaomi.com</a>就能看到下载按钮了。<br><img src="https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/superbed/2019/07/16/5d2d31fa451253d178512fbf.jpg" alt=""><br>然后下载，用主题商店导入就是了,波兰版的主题商店没有收费功能，所以即使是收费的主题也能直接导入后应用。唯一有点麻烦的就是，后面要升级的话就得再手动下载一次。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迫于各种原生的ROM BUG太多，昨天又刷回了MIUI。但是我的MIUI是波兰版的，里面自带的主题商店只有国外的主题，比较简陋。那想用回国内主题怎么办呢？&lt;br&gt;
    
    </summary>
    
    
      <category term="手机" scheme="https://coolrc.me/tags/%E6%89%8B%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>ARCGIS网络分析</title>
    <link href="https://coolrc.me/2019/04/03/201904032251/"/>
    <id>https://coolrc.me/2019/04/03/201904032251/</id>
    <published>2019-04-03T14:51:37.000Z</published>
    <updated>2019-04-03T14:51:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>ArcGIS Network Analyst 扩展模块 可以解决一般的网络问题，例如查找穿过城市的最佳路线，查找最近的急救车辆或设施点，识别某一位置周围的服务区，使用一支车队为一组订单提供服务，或选择要设立或关闭的最佳设施点。<a id="more"></a></p><h3 id="STEP-1-地图的获取"><a href="#STEP-1-地图的获取" class="headerlink" title="STEP 1 地图的获取"></a>STEP 1 地图的获取</h3><p>要进行网络分析，我们需要的是矢量的道路网地图。一般自己想办法绘制或者购买数据才能得到精确的底图。路网的要求不是很细致的话，那还有一个办法是从<a href="[https://www.openstreetmap.org](https://www.openstreetmap.org/">openstreetmap</a>)上面下载公开的地图。OpenStreetMap是一个开源地图项目，任何人都可以在上面编辑地图。但是国内用户比较少，上面的路网比较残缺。不过缺少的基本都是小区内的道路，城市道路还是比较完整的。</p><p>从OpenStreetMap上面下载下来的地图是<code>OSM</code>格式的文件，需要转换成Shapfile才能用。比较简单的办法是下载一个QGIS，然后用QGIS导出为shapfile再用ARCGIS打开。</p><h3 id="STEP-2-创建网络数据集"><a href="#STEP-2-创建网络数据集" class="headerlink" title="STEP 2 创建网络数据集"></a>STEP 2 创建网络数据集</h3><p>准备好Shapfile以后，进入ARCGIS进行编辑，确保至少有阻抗信息字段，如距离或者行驶时间。如果是单向道路或者有转弯要素，可以参考这里配置相应字段：<a href="https://desktop.arcgis.com/zh-cn/arcmap/latest/extensions/network-analyst/types-of-evaluators-used-by-a-network.htm" target="_blank" rel="noopener">https://desktop.arcgis.com/zh-cn/arcmap/latest/extensions/network-analyst/types-of-evaluators-used-by-a-network.htm</a></p><p>对于连通性的问题，可以启用菜单栏的拓扑工具来修改连通性。</p><p>准备好数据后，就可以创建网络数据集了。首先进入arccatalog启用网络分析拓展。</p><p><img src="https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/superbed/2019/04/03/5ca4c3853a213b0417a21a37.jpg" alt=""></p><p>然后在Shapfile上右键创建网络数据集</p><p><img src="https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/superbed/2019/04/03/5ca4c3da3a213b0417a21d27.jpg" alt=""></p><p>然后根据向导配置连通性，阻抗，方向等等各种属性就行了。最后点击完成就能创建一个网络数据集了。</p><h3 id="STEP3-进行网络分析"><a href="#STEP3-进行网络分析" class="headerlink" title="STEP3 进行网络分析"></a>STEP3 进行网络分析</h3><p>创建好网络数据集后，打开ARCMAP，打开arccatalog窗口，将网络数据集拖进来就能看到了。然后同上启用ARCMAP的网络分析拓展就可以开始分析了。</p><p><img src="https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/superbed/2019/04/03/5ca4c4ef3a213b0417a22582.jpg" alt=""></p><p>我们可以加载网络分析工具条，新建一个路径分析试试。打开工具条上的网络分析窗口按钮，选择停靠点，新建几个停靠点，在图层上右键选择求解：</p><p><img src="https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/superbed/2019/04/03/5ca4c5f03a213b0417a230d1.jpg" alt=""></p><p>可以看到，我们的网络分析成功了。查看路径属性表，可以看到，这条路径的长度是18566米</p><p><img src="https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/superbed/2019/04/03/5ca4cb973a213b0417a25f2d.png" alt=""></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://desktop.arcgis.com/zh-cn/arcmap/latest/extensions/network-analyst/exercise-1-creating-a-network-dataset.htm" target="_blank" rel="noopener">https://desktop.arcgis.com/zh-cn/arcmap/latest/extensions/network-analyst/exercise-1-creating-a-network-dataset.htm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ArcGIS Network Analyst 扩展模块 可以解决一般的网络问题，例如查找穿过城市的最佳路线，查找最近的急救车辆或设施点，识别某一位置周围的服务区，使用一支车队为一组订单提供服务，或选择要设立或关闭的最佳设施点。
    
    </summary>
    
    
      <category term="GIS" scheme="https://coolrc.me/tags/GIS/"/>
    
  </entry>
  
  <entry>
    <title>用emoji规范Git commit message</title>
    <link href="https://coolrc.me/2019/02/18/201902181722/"/>
    <id>https://coolrc.me/2019/02/18/201902181722/</id>
    <published>2019-02-18T09:22:31.000Z</published>
    <updated>2019-02-18T09:22:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/19-02-18/snipaste_20190218_181705.png" alt=""><br><code>git commit</code>的时候不知道写什么？没关系，这里有一款工具解决你的烦恼。<code>commitizen</code>是一个自动生成<code>commit messsage</code>的工具，只需要运行<code>git cz</code>就能够自动根据你的选择帮你生成整洁美观的<code>commit messsage</code>。通常都是配合<code>conventional-changelog</code>使用<a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines" target="_blank" rel="noopener">angular的commit格式</a>。<br>这个技巧想必已经烂大街了。所以这里介绍一个更酷的方式：配合上一些第三方的配置文件，使用emoji来作为<code>commit messsage</code>。<a id="more"></a></p><h2 id="STEP-1-安装"><a href="#STEP-1-安装" class="headerlink" title="STEP 1 安装"></a>STEP 1 安装</h2><p>这里安装所需的工具：commitizen conventional-changelog conventional-changelog-cli cz-customizable，然后使用<a href="https://github.com/nielsgl/conventional-changelog-emoji" target="_blank" rel="noopener">nielsgl/conventional-changelog-emoji</a>这个项目里面的配置文件自定义<code>commit messsage</code>格式。</p><p class="tip">其实用<code>cz-emoji</code>可以直接生成emoji格式的<code>commit message</code>的，但是这玩意生成的<code>commit message</code>用emoji取代了<code>&lt;type&gt;</code>，没法用<code>conventional-changelog-cli</code>生成<code>changelog</code>，所以我们要用<code>cz-customizable</code>进行自定义。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g commitizen conventional-changelog conventional-changelog-cli cz-customizable</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&#123; "path": "cz-customizable" &#125;'</span> &gt; ~/.czrc</span><br><span class="line">wget https://raw.githubusercontent.com/nielsgl/conventional-changelog-emoji/master/.cz-config.js -O ~/.cz-config.js</span><br></pre></td></tr></table></figure><h2 id="STEP-2-使用"><a href="#STEP-2-使用" class="headerlink" title="STEP 2 使用"></a>STEP 2 使用</h2><p>使用<code>git cz</code>就能按照选项填写 commit message。要生成<code>changelog</code>的话，参照如下方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不会覆盖以前的 Change log，只会在 CHANGELOG.md 的头部加上自从上次发布以来的变动</span></span><br><span class="line">$ conventional-changelog -i CHANGELOG.md -s -p </span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成所有发布的 Change log</span></span><br><span class="line">$ conventional-changelog -i CHANGELOG.md -w -r 0</span><br></pre></td></tr></table></figure><p>生成<code>changelog</code>后，要发布release什么的只要复制<code>CHANGELOG.md</code>的内容填进去就行了。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://juejin.im/post/5bd2debfe51d457abc710b57" target="_blank" rel="noopener">规范你的 commit message 并且根据 commit 自动生成 CHANGELOG.md</a><br><a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">commitizen/cz-cli</a><br><a href="https://github.com/nielsgl/conventional-changelog-emoji" target="_blank" rel="noopener">nielsgl/conventional-changelog-emoji</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://coolrc-blog.oss-cn-shenzhen.aliyuncs.com/19-02-18/snipaste_20190218_181705.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;code&gt;git commit&lt;/code&gt;的时候不知道写什么？没关系，这里有一款工具解决你的烦恼。&lt;code&gt;commitizen&lt;/code&gt;是一个自动生成&lt;code&gt;commit messsage&lt;/code&gt;的工具，只需要运行&lt;code&gt;git cz&lt;/code&gt;就能够自动根据你的选择帮你生成整洁美观的&lt;code&gt;commit messsage&lt;/code&gt;。通常都是配合&lt;code&gt;conventional-changelog&lt;/code&gt;使用&lt;a href=&quot;https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;angular的commit格式&lt;/a&gt;。&lt;br&gt;这个技巧想必已经烂大街了。所以这里介绍一个更酷的方式：配合上一些第三方的配置文件，使用emoji来作为&lt;code&gt;commit messsage&lt;/code&gt;。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>travis-ci 部署到github release</title>
    <link href="https://coolrc.me/2019/02/08/201902081324/"/>
    <id>https://coolrc.me/2019/02/08/201902081324/</id>
    <published>2019-02-08T05:24:38.000Z</published>
    <updated>2019-02-08T05:24:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>更多内容看这里：<a href="https://docs.travis-ci.com/user/deployment/releases/" target="_blank" rel="noopener">https://docs.travis-ci.com/user/deployment/releases/</a><a id="more"></a></p><h2 id="安装命令行工具"><a href="#安装命令行工具" class="headerlink" title="安装命令行工具"></a>安装命令行工具</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ruby ruby-dev</span><br><span class="line">gem install travis</span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">travis login --pro</span><br><span class="line">travis setup releases --pro</span><br></pre></td></tr></table></figure><h2 id="CI-配置"><a href="#CI-配置" class="headerlink" title="CI 配置"></a>CI 配置</h2><p>加入下面两行配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_cleanup:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  on:</span></span><br><span class="line"><span class="attr">    repo:</span> <span class="string">name/repo</span></span><br><span class="line"><span class="attr">    tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>完整的<code>depoly</code>如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  provider:</span> <span class="string">releases</span></span><br><span class="line"><span class="attr">  api_key:</span></span><br><span class="line"><span class="attr">    secure:</span> <span class="string">BZy0B58PbjBxZpPEPxxt+JVV3x5MuM9Ca0q7uF3Z1PqWFEdoGgXQhWfHggEyd8EctEVCzr6MDFntAqsfFTG6mE9KJOlKOoUj4wkB1kTqUMNxWjR+5+8w8yAHHFwK9rQqgtpTtq3mL3euUox4UTzfliM2JWfGtkKJu0oKP2k6O0AbCV824506ZKe9cbTo0ato/DS8VizOcW7SXv3vupIjDW1EW5QziT7rReYjYf9o2quY0/muln80ennCHZn7uJxi4GS1rznN5R3iL1zfNXKzCUpwOTMTZbT2v6NLOHr1TCVINZofnnBMeQRoFt5GJcKRDZrlrSRENjFSd8q5p13TlB7pOOjwZnjwDXeqZ6famz41fZYtgxvXqgyie4iBrfXGSurCbdUW0vjgX3JOSMyG05PnZD+KUQUu3BKy77U38AK1E4Qbh1hmAfM2rv2qNJdpqlo7hvtb7QfUzXvlgXX0bzK7NyZp+MmZJ34wrHwe2KO/PuAvKivnBPGg9SLtZLr6wcyho+I1EvL+oDljEgcqMnxbiOlokJ0bN40YU4b9mSxNVGua41pDEFP5pyBsL9XYKMcAJJHnVKhQtNjLHagK+pn5/BtrVUt4HRM0OyID5s6YJFdTBhn1LG0TkiMeZda2t9OZwDoTBFQjwEcC2F99nxRcba4olBj/8kc6Q8wmTF0=</span></span><br><span class="line"><span class="attr">  file:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">tgbot_linux_64</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">tgbot_linux_32</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">tgbot_windows_64.exe</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">tgbot_windows_32.exe</span></span><br><span class="line"><span class="attr">  skip_cleanup:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  on:</span></span><br><span class="line"><span class="attr">    repo:</span> <span class="string">coolrc136/go-tg-bot</span></span><br><span class="line"><span class="attr">    tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;更多内容看这里：&lt;a href=&quot;https://docs.travis-ci.com/user/deployment/releases/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.travis-ci.com/user/deployment/releases/&lt;/a&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>golang逐行读取文件</title>
    <link href="https://coolrc.me/2018/11/08/201811081434/"/>
    <id>https://coolrc.me/2018/11/08/201811081434/</id>
    <published>2018-11-08T06:34:03.000Z</published>
    <updated>2018-11-08T06:34:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>golang 中读取文件有很多方法，本文介绍用<code>bufio</code>包如何逐行进行读取和写入。因为<code>bufio</code>包提供了缓冲，性能比较优秀。<a id="more"></a></p><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><p><strong>逐行存入切片</strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readLines</span><span class="params">(path <span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">string</span>, <span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">  file, err := os.Open(path)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>,<span class="number">0</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> lines []<span class="keyword">string</span></span><br><span class="line">  linecount :=<span class="number">0</span></span><br><span class="line">  scanner := bufio.NewScanner(file)</span><br><span class="line">  <span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">    lines = <span class="built_in">append</span>(lines, scanner.Text())</span><br><span class="line">    linecount++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lines,linecount,scanner.Err()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用<code>bufio</code>包的<code>scanner</code>可以对数据进行扫描输入，除了逐行分割以外，还有其他的分割方式：<br>ScanLines（默认）<br>ScanWords（分割单词）<br>ScanRunes（在遍历 UTF-8 字符串而不是字节时将会非常有用）<br>ScanBytes</p><p><strong>逐单词存入切片</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">file, err := os.Open(<span class="string">"filetoread.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">scanner := bufio.NewScanner(file)</span><br><span class="line">scanner.Split(bufio.ScanWords)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> words []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">    words = <span class="built_in">append</span>(words, scanner.Text())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"word list:"</span>)</span><br><span class="line"><span class="keyword">for</span> _, word := <span class="keyword">range</span> words &#123;</span><br><span class="line">    fmt.Println(word)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h2><p>写入使用的是<code>bufio</code>中<code>writer</code>对象的一些方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">以下三个方法可以直接写入到文件中</span><br><span class="line"><span class="comment">//写入单个字节</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span> <span class="title">WriteByte</span><span class="params">(c <span class="keyword">byte</span>)</span> <span class="title">error</span></span></span><br><span class="line"><span class="function">//写入单个<span class="title">Unicode</span>指针返回写入字节数和错误信息</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(b *Writer)</span> <span class="title">WriteRune</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="params">(size <span class="keyword">int</span>, err error)</span></span></span><br><span class="line"><span class="function">//写入字符串并返回写入字节数和错误信息</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(b *Writer)</span> <span class="title">WriteString</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span></span><br></pre></td></tr></table></figure><p><strong>逐行写入</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeLines</span><span class="params">(path <span class="keyword">string</span>, lines []<span class="keyword">string</span>)</span> <span class="title">error</span></span>&#123;</span><br><span class="line">    file, err := os.Create(path)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> file.Close()</span><br><span class="line">    writer := bufio.NewWriter(file)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _,elem := <span class="keyword">range</span> lines &#123;</span><br><span class="line">        _,err = writer.WriteString(elem + <span class="string">"\n"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://xxbandy.github.io/2017/12/17/Golang%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/" target="_blank" rel="noopener">Golang读写文件操作</a><br><a href="https://studygolang.com/articles/12905" target="_blank" rel="noopener">使用 Go 读取文件 - 概览</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;golang 中读取文件有很多方法，本文介绍用&lt;code&gt;bufio&lt;/code&gt;包如何逐行进行读取和写入。因为&lt;code&gt;bufio&lt;/code&gt;包提供了缓冲，性能比较优秀。
    
    </summary>
    
    
      <category term="golang" scheme="https://coolrc.me/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>用gitlab自动部署博客</title>
    <link href="https://coolrc.me/2018/10/21/1810212220/"/>
    <id>https://coolrc.me/2018/10/21/1810212220/</id>
    <published>2018-10-21T14:20:07.000Z</published>
    <updated>2018-10-21T14:20:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天突然想用Windows写博客，但是要在windows上部署hexo还是挺麻烦的，就想着利用gitlab-CI的自动部署来帮我编译博客。<a id="more"></a></p><p>部署起来其实很简单，gitlab已经提供了各种博客系统的示例，当然也包括hexo，去这里<a href="https://gitlab.com/pages/hexo/tree/master" target="_blank" rel="noopener">https://gitlab.com/pages/hexo/tree/master</a>把<code>.gitignore</code>和<code>.gitlab-ci.yml</code>这两个文件扒下来放博客目录里。在<code>.gitignore</code>最后一行加上<code>package-lock.json</code>。</p><p>然后修改<code>.gitlab-ci.yml</code>文件，<code>pages</code>前面加上一个代码块</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">before_script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">export</span> <span class="string">TZ='Asia/Shanghai'</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.name</span> <span class="string">"你的id"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.email</span> <span class="string">"你的邮箱"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span> <span class="bullet">-g</span> <span class="string">hexo</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span> <span class="bullet">-g</span> <span class="string">hexo-cli</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span></span><br></pre></td></tr></table></figure><p>然后去github申请一个有repo权限的token，&gt;&gt; <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">传送门</a></p><p>修改hexo的配置文件的repo为</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span></span><br><span class="line"><span class="attr">     github:</span> <span class="attr">https://你的token:x-oauth-basic@github.com/coolrc136/coolrc136.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>然后把git仓库push上去就行，gitlab就会自动帮你部署啦</p><p>hexo的配置文件中一般都存了很多token，安全起见，建议保存到私有仓库。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天突然想用Windows写博客，但是要在windows上部署hexo还是挺麻烦的，就想着利用gitlab-CI的自动部署来帮我编译博客。
    
    </summary>
    
    
      <category term="git" scheme="https://coolrc.me/tags/git/"/>
    
      <category term="hexo" scheme="https://coolrc.me/tags/hexo/"/>
    
      <category term="blog" scheme="https://coolrc.me/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Git忽略已经被提交的文件</title>
    <link href="https://coolrc.me/2018/10/21/1810212213/"/>
    <id>https://coolrc.me/2018/10/21/1810212213/</id>
    <published>2018-10-21T14:13:14.000Z</published>
    <updated>2018-10-21T14:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天折腾<code>gitlab-ci</code>时候不小心commit了一个没用的文件上去，强迫症的我当然是忍不了啊。但是文件已经commit上去了，再修改<code>。gitignore</code>已经来不及了，怎么办呢。<a id="more"></a></p><p>上网搜索了一下，segmentfault 上的一个回答是这样的</p><blockquote><p>正确的做法应该是：<code>git rm --cached logs/xx.log</code>，然后更新 <code>.gitignore</code> 忽略掉目标文件，最后 <code>git commit -m &quot;We really don&#39;t want Git to track this anymore!&quot;</code></p></blockquote><p>至于为什么这么做，请看原文：<a href="https://segmentfault.com/q/1010000000430426" target="_blank" rel="noopener">https://segmentfault.com/q/1010000000430426</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天折腾&lt;code&gt;gitlab-ci&lt;/code&gt;时候不小心commit了一个没用的文件上去，强迫症的我当然是忍不了啊。但是文件已经commit上去了，再修改&lt;code&gt;。gitignore&lt;/code&gt;已经来不及了，怎么办呢。
    
    </summary>
    
    
      <category term="git" scheme="https://coolrc.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>使用Gitment评论工具</title>
    <link href="https://coolrc.me/2018/07/03/118276697/"/>
    <id>https://coolrc.me/2018/07/03/118276697/</id>
    <published>2018-07-03T06:11:31.000Z</published>
    <updated>2018-07-03T06:11:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.flickr.com/photos/145320515@N04/42263203695/sizes/o/" alt=""></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">Gitment</a>github issue 实现的评论系统。支持登录、查看、评论、点赞等操作。当然了，还支持<code>Markdown</code>和代码高亮等所有 github issue 的功能。<br><a id="more"></a></p><ul><li><a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">demo页面</a></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点击这里</a>注册一个<code>github OAuth Application</code>，保证<code>callback URL</code>是你的博客地址就行。<br>然后新建一个repo用于存放你的评论。</li></ol><p>2.引入Gitment代码到相应页面<br>我用的hexo，所以找打博客主题的<code>layout/comment.jade</code>文件，加入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> theme.gitment</span><br><span class="line">    #render</span><br><span class="line">    link(rel=<span class="string">"stylesheet"</span>, href=url_for(<span class="string">"https://imsun.github.io/gitment/style/default.css"</span>))</span><br><span class="line">    script(src=<span class="string">'https://imsun.github.io/gitment/dist/gitment.browser.js'</span>)</span><br><span class="line">    script.</span><br><span class="line">        <span class="keyword">var</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span><br><span class="line">        <span class="comment">//id: '页面 ID', // 可选。</span></span><br><span class="line">        owner: <span class="string">'#&#123;theme.gitment.id&#125;'</span>,</span><br><span class="line">        repo: <span class="string">'#&#123;theme.gitment.repo&#125;'</span>,</span><br><span class="line">        oauth: &#123;</span><br><span class="line">            client_id: <span class="string">'#&#123;theme.gitment.clientid&#125;'</span>,</span><br><span class="line">            client_secret: <span class="string">'#&#123;theme.gitment.clientsecret&#125;'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        gitment.render(<span class="string">'render'</span>)</span><br></pre></td></tr></table></figure><p>然后在博客<code>_comfig.yml</code>文件配置加入对应的参数即可</p><p>如果你是直接写html的话，直接加入这些代码填入正确的参数就行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span><br><span class="line">  id: <span class="string">'Your page ID'</span>, <span class="comment">// optional</span></span><br><span class="line">  owner: <span class="string">'Your GitHub ID'</span>,</span><br><span class="line">  repo: <span class="string">'The repo to store comments'</span>,</span><br><span class="line">  oauth: &#123;</span><br><span class="line">    client_id: <span class="string">'Your client ID'</span>,</span><br><span class="line">    client_secret: <span class="string">'Your client secret'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// For more available options, check out the documentation below</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gitment.render(<span class="string">'comments'</span>)</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="comment">// gitment.render(document.getElementById('comments'))</span></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="comment">// document.body.appendChild(gitment.render())</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>这样配置好后打开页面应该就能看到<code>Gitment</code>的评论框了。</p><p><img src="https://www.flickr.com/photos/145320515@N04/42263203695/sizes/o/" alt=""></p><p>然后任何人都可以点击<code>Initialize Comments</code>新建一个issue用于存放评论。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.flickr.com/photos/145320515@N04/42263203695/sizes/o/&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/imsun/gitment&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gitment&lt;/a&gt;github issue 实现的评论系统。支持登录、查看、评论、点赞等操作。当然了，还支持&lt;code&gt;Markdown&lt;/code&gt;和代码高亮等所有 github issue 的功能。&lt;br&gt;
    
    </summary>
    
    
      <category term="github" scheme="https://coolrc.me/tags/github/"/>
    
      <category term="评论框" scheme="https://coolrc.me/tags/%E8%AF%84%E8%AE%BA%E6%A1%86/"/>
    
  </entry>
  
  <entry>
    <title>使用Google BBR优化TCP连接</title>
    <link href="https://coolrc.me/2016/12/15/15192343/"/>
    <id>https://coolrc.me/2016/12/15/15192343/</id>
    <published>2016-12-15T11:23:43.000Z</published>
    <updated>2016-12-15T11:23:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://c1.staticflickr.com/1/266/31513133952_5dc5885698_z_d.jpg" alt=""><br>BBR 是 Google 发布的一个新的 TCP 拥塞控制算法，关于 BBR 算法，请看《<a href="https://www.zhihu.com/question/53559433" target="_blank" rel="noopener">Linux Kernel 4.9 中的 BBR 算法与之前的 TCP 拥塞控制相比有什么优势？</a>》<br><a id="more"></a><br>在 Linux kernel 4.9 中加入了 BBR 算法，正好最近 kernel 4.9 正式版发布，看到有人说 BBR 于是尝试安装了一下。</p><p>下面是我在 vultr 的 ubuntu16.04 VPS 上安装 kernel 4.9 并开启 BBR 的记录。</p><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p>首先下载并安装 kernel 4.9 的软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9/linux-image-4.9.0-040900-generic_4.9.0-040900.201612111631_amd64.deb</span><br><span class="line">dpkg -i linux-image-4.9.0-040900-generic_4.9.0-040900.201612111631_amd64.deb</span><br></pre></td></tr></table></figure><p>然后删除旧内核</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l|grep linux-image</span><br></pre></td></tr></table></figure><p>将列出的不是 4.9 版本的内核删除</p><p>然后执行 <code>update-grub</code> 更新 GRUB 引导。</p><h3 id="开启-BBR"><a href="#开启-BBR" class="headerlink" title="开启 BBR"></a>开启 BBR</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"net.core.default_qdisc=fq"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"net.ipv4.tcp_congestion_control=bbr"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>然后即可 <code>reboot</code> 重启系统。</p><p>再次开机后，执行 <code>sysctl net.ipv4.tcp_available_congestion_control</code><br>如果结果中有 BBR , 则证明你的内核已开启 BBR<br>执行lsmod | grep bbr, 看到有 tcp_bbr 模块即说明 BBR 已启动。</p><hr><p> 参考链接：<br> <a href="http://51.ruyo.net/p/2783.html" target="_blank" rel="noopener">Google BBR 优化算法，实现TCP加速</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://c1.staticflickr.com/1/266/31513133952_5dc5885698_z_d.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;BBR 是 Google 发布的一个新的 TCP 拥塞控制算法，关于 BBR 算法，请看《&lt;a href=&quot;https://www.zhihu.com/question/53559433&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Linux Kernel 4.9 中的 BBR 算法与之前的 TCP 拥塞控制相比有什么优势？&lt;/a&gt;》&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://coolrc.me/categories/linux/"/>
    
    
      <category term="linux" scheme="https://coolrc.me/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Arch禁用nvidia独显</title>
    <link href="https://coolrc.me/2016/11/28/28115748/"/>
    <id>https://coolrc.me/2016/11/28/28115748/</id>
    <published>2016-11-28T03:57:48.000Z</published>
    <updated>2016-11-28T03:57:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://c2.staticflickr.com/6/5668/31173628641_b3e045d3cc_o_d.png" alt=""></p><p>双显卡的笔记本通常都是用的i卡，n卡都是通着电而不用的，除非你使用了 bumblebee ，否则这颗核弹会一直通电，大大减少待机时间。最好的办法是禁用N卡，不让他通电。然而很多bios是不支持禁用N卡的，或者你还想在windows上使用N卡，这时候怎么办呢？<a id="more"></a></p><p>bbswitch 可以帮助你禁用N卡，首先安装 bbswitch</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S bbswitch dkms</span><br></pre></td></tr></table></figure><p>然后设施 bbswitch 开机自动加载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">echo</span> <span class="string">"bbswitch"</span> &gt;&gt; /etc/modules-load.d/modules.conf</span><br></pre></td></tr></table></figure><p>设置 bbswitch 启动参数并禁用nouveau</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">echo</span> <span class="string">"options bbswitch load_state=0"</span> &gt;&gt; /etc/modprobe.d/bbswitch.conf</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">"blacklist nouveau"</span> &gt;&gt; /etc/modprobe.d/nouveau_blacklist.conf</span><br></pre></td></tr></table></figure><p>然后重建 initrd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkinitcpio -p linux</span><br></pre></td></tr></table></figure><p>其他发行版可能是 <code>mkinitrd</code>命令</p><p>执行完成后重启电脑。</p><p>执行 <code>lspci</code> 或 <code>lspci | grep NVIDIA</code> 查看效果，如果N卡后面显示 <code>(rev ff)</code> ，表明已经成功禁用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://c2.staticflickr.com/6/5668/31173628641_b3e045d3cc_o_d.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;双显卡的笔记本通常都是用的i卡，n卡都是通着电而不用的，除非你使用了 bumblebee ，否则这颗核弹会一直通电，大大减少待机时间。最好的办法是禁用N卡，不让他通电。然而很多bios是不支持禁用N卡的，或者你还想在windows上使用N卡，这时候怎么办呢？
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>解决konsole无法输入中文的问题</title>
    <link href="https://coolrc.me/2016/11/24/24063358/"/>
    <id>https://coolrc.me/2016/11/24/24063358/</id>
    <published>2016-11-23T22:33:58.000Z</published>
    <updated>2016-11-23T22:33:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>安装完kde桌面后，中文输入法在konsole里面没法调用。怎么解决呢？<br>编辑<code>/etc/profile</code>,在里面加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> XIM_PROGRAM=fcitx</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> XIM=fcitx</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=<span class="string">"@im=fcitx"</span></span><br></pre></td></tr></table></figure><p>然后注销当前用户重新登录即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装完kde桌面后，中文输入法在konsole里面没法调用。怎么解决呢？&lt;br&gt;编辑&lt;code&gt;/etc/profile&lt;/code&gt;,在里面加入&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
    
      <category term="linux" scheme="https://coolrc.me/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>nginx反代+http2配置</title>
    <link href="https://coolrc.me/2016/10/12/12210953/"/>
    <id>https://coolrc.me/2016/10/12/12210953/</id>
    <published>2016-10-12T13:09:53.000Z</published>
    <updated>2016-10-19T15:25:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://c1.staticflickr.com/9/8640/30280932405_35376236c5_z_d.jpg" alt=""></p><p>国庆节回家没事干，研究了一下nginx配置，参考了 Jerry Qu的文章 <a href="https://imququ.com/post/my-nginx-conf.html" target="_blank" rel="noopener">本博客 Nginx 配置之完整篇</a>,给我的 github pages 用nginx做了一个反代，顺便开启了 http/2 支持。<a id="more"></a>下面开始配置过程。</p><p>操作系统我选择的是 ubuntu 16.04 ，其他发行版请自行修改命令。</p><h3 id="安装并编译相关软件"><a href="#安装并编译相关软件" class="headerlink" title="安装并编译相关软件"></a>安装并编译相关软件</h3><p>首先安装依赖和编译工具：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libpcre3 libpcre3-dev zlib1g-dev unzip git</span><br></pre></td></tr></table></figure></p><h4 id="Brotli压缩支持"><a href="#Brotli压缩支持" class="headerlink" title="Brotli压缩支持"></a>Brotli压缩支持</h4><p>编译安装 <a href="https://github.com/google/brotli" target="_blank" rel="noopener">libbrotli</a>,使用 Brotli 压缩格式可以实现更高的网页压缩比。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install autoconf libtool automake</span><br><span class="line"></span><br><span class="line">git clone https://github.com/bagder/libbrotli</span><br><span class="line">cd libbrotli</span><br><span class="line"></span><br><span class="line"># 如果提示 error: C source seen but &apos;CC&apos; is undefined，可以在 configure.ac 最后加上 AC_PROG_CC</span><br><span class="line">./autogen.sh</span><br><span class="line"></span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line">cd  ../</span><br></pre></td></tr></table></figure><p>接下来获取 ngx_brotli 源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/google/ngx_brotli.git</span><br></pre></td></tr></table></figure><h4 id="安装-openssl"><a href="#安装-openssl" class="headerlink" title="安装 openssl"></a>安装 openssl</h4><p>系统自带的openssl太旧，需要自行编译最新版。这里安装 openssl 1.1.0b</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -O openssl.tar.gz -c https://www.openssl.org/source/openssl-1.1.0b.tar.gz</span><br><span class="line">tar zxf openssl.tar.gz</span><br><span class="line">mv openssl-1.1.0b/ openssl</span><br></pre></td></tr></table></figure><h4 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://nginx.org/download/nginx-1.11.4.tar.gz</span><br><span class="line">tar zxf nginx-1.11.4.tar.gz</span><br><span class="line"></span><br><span class="line">cd nginx-1.11.4/</span><br><span class="line"></span><br><span class="line">./configure --add-module=../ngx_brotli --add-module=../nginx-ct-1.3.0 --with-openssl=../openssl --with-http_v2_module --with-http_ssl_module --with-ipv6 --with-http_gzip_static_module</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h4 id="Nginx管理脚本"><a href="#Nginx管理脚本" class="headerlink" title="Nginx管理脚本"></a>Nginx管理脚本</h4><p>由于nginx是自己编译的，无法使用 systemd 管理，这里用一个脚本进行管理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### BEGIN INIT INFO</span></span><br><span class="line"><span class="comment"># Provides:          nginx</span></span><br><span class="line"><span class="comment"># Required-Start:    $all</span></span><br><span class="line"><span class="comment"># Required-Stop:     $all</span></span><br><span class="line"><span class="comment"># Default-Start:     2 3 4 5</span></span><br><span class="line"><span class="comment"># Default-Stop:      0 1 6</span></span><br><span class="line"><span class="comment"># Short-Description: starts the nginx web server</span></span><br><span class="line"><span class="comment"># Description:       starts nginx using start-stop-daemon</span></span><br><span class="line"><span class="comment">### END INIT INFO</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">DAEMON=/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">NAME=nginx</span><br><span class="line">DESC=nginx</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> -x <span class="variable">$DAEMON</span> || <span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Include nginx defaults if available</span></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/default/nginx ] ; <span class="keyword">then</span></span><br><span class="line">  . /etc/default/nginx</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">. /lib/lsb/init-functions</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"Starting <span class="variable">$DESC</span>: "</span></span><br><span class="line">    start-stop-daemon --start --quiet --pidfile /usr/<span class="built_in">local</span>/nginx/logs/<span class="variable">$NAME</span>.pid \</span><br><span class="line">        --<span class="built_in">exec</span> <span class="variable">$DAEMON</span> -- <span class="variable">$DAEMON_OPTS</span> || <span class="literal">true</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$NAME</span>."</span></span><br><span class="line">    ;;</span><br><span class="line">  stop)</span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"Stopping <span class="variable">$DESC</span>: "</span></span><br><span class="line">    start-stop-daemon --stop --quiet --pidfile /usr/<span class="built_in">local</span>/nginx/logs/<span class="variable">$NAME</span>.pid \</span><br><span class="line">        --<span class="built_in">exec</span> <span class="variable">$DAEMON</span> || <span class="literal">true</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$NAME</span>."</span></span><br><span class="line">    ;;</span><br><span class="line">  restart|force-reload)</span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"Restarting <span class="variable">$DESC</span>: "</span></span><br><span class="line">    start-stop-daemon --stop --quiet --pidfile \</span><br><span class="line">        /usr/<span class="built_in">local</span>/nginx/logs/<span class="variable">$NAME</span>.pid --<span class="built_in">exec</span> <span class="variable">$DAEMON</span> || <span class="literal">true</span></span><br><span class="line">    sleep 1</span><br><span class="line">    start-stop-daemon --start --quiet --pidfile \</span><br><span class="line">        /usr/<span class="built_in">local</span>/nginx/logs/<span class="variable">$NAME</span>.pid --<span class="built_in">exec</span> <span class="variable">$DAEMON</span> -- <span class="variable">$DAEMON_OPTS</span> || <span class="literal">true</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$NAME</span>."</span></span><br><span class="line">    ;;</span><br><span class="line">  reload)</span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"Reloading <span class="variable">$DESC</span> configuration: "</span></span><br><span class="line">    start-stop-daemon --stop --signal HUP --quiet --pidfile /usr/<span class="built_in">local</span>/nginx/logs/<span class="variable">$NAME</span>.pid \</span><br><span class="line">        --<span class="built_in">exec</span> <span class="variable">$DAEMON</span> || <span class="literal">true</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$NAME</span>."</span></span><br><span class="line">    ;;</span><br><span class="line">  status)</span><br><span class="line">    status_of_proc -p /usr/<span class="built_in">local</span>/nginx/logs/<span class="variable">$NAME</span>.pid <span class="string">"<span class="variable">$DAEMON</span>"</span> nginx &amp;&amp; <span class="built_in">exit</span> 0 || <span class="built_in">exit</span> $?</span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    N=/etc/init.d/<span class="variable">$NAME</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$N</span> &#123;start|stop|restart|reload|force-reload|status&#125;"</span> &gt;&amp;2</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>将这个脚本放到任何位置，加上执行权限即可。</p><p>现在管理 Nginx 只需使用以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./nginx start|stop|restart|reload</span><br></pre></td></tr></table></figure><p>如果要开机自动启动 Nginx，请执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-rc.d -f nginx defaults</span><br></pre></td></tr></table></figure><p>然后配置 nginx 的配置文件 <code>/usr/local/nginx/conf/nginx.conf</code>，将http部分修改成下面这样</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>            mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>       application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">charset</span>            UTF-<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>           <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span>         <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span>        <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#... ...#</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">gzip</span>               <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_vary</span>          <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">gzip_comp_level</span>    <span class="number">6</span>;</span><br><span class="line">    <span class="attribute">gzip_buffers</span>       <span class="number">16</span> <span class="number">8k</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">gzip_min_length</span>    <span class="number">1000</span>;</span><br><span class="line">    <span class="attribute">gzip_proxied</span>       any;</span><br><span class="line">    <span class="attribute">gzip_disable</span>       <span class="string">"msie6"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">gzip_http_version</span>  <span class="number">1</span>.<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">gzip_types</span>         text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果编译时添加了 ngx_brotli 模块，需要增加 brotli 相关配置</span></span><br><span class="line">    <span class="attribute">brotli</span>             <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">brotli_comp_level</span>  <span class="number">6</span>;</span><br><span class="line">    <span class="attribute">brotli_types</span>       text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#... ...#</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span>            /home/jerry/www/nginx_conf/<span class="regexp">*.conf</span>; <span class="comment">#站点配置文件地址，可以自行指定</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成-https-证书"><a href="#生成-https-证书" class="headerlink" title="生成 https 证书"></a>生成 https 证书</h3><p>这里使用 <a href="https://github.com/lukas2511/dehydrated" target="_blank" rel="noopener">dehydrated</a> 来自动申请 <a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s Encrypt</a> 的证书。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/lukas2511/dehydrated.git</span><br><span class="line">cd dehydrated</span><br></pre></td></tr></table></figure><p>然后在 dehydrated 新建一个 <code>domains.txt</code> ，里面填入你的域名，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">example.com www.example.com</span><br><span class="line">example.net www.example.net wiki.example.net</span><br></pre></td></tr></table></figure><p>然后新建一个 nginx 站点配置文件，内容如下</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;                                                                    </span><br><span class="line">         <span class="attribute">listen</span>   <span class="number">80</span>; <span class="comment">## 监听 IPv4 80 端口</span></span><br><span class="line">         <span class="attribute">server_name</span> example.com www.example.com;</span><br><span class="line">         <span class="attribute">location</span> /.well-known/acme-challenge &#123;</span><br><span class="line">           <span class="attribute">alias</span> /var/www/dehydrated;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动 nginx ，保证域名能解析到本机。</p><p>创建文件夹 /var/www/dehydrated 更改目录权限为 777 。</p><p>修改 dehydrated 代码，使他支持生成 ECC 证书，修改 <code>dehydreted</code> 文件，修改其中121行变量 KEY_ALGO 值为 <code>secp384r1</code> ，</p><p>然后就可以生成证书了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dehydrated -c</span><br></pre></td></tr></table></figure><p>软件会自动生成各种密钥并申请证书，完成后各种文件都在 <code>certs</code> 文件夹里保存。</p><p>然后再生成一个赫尔曼密钥，使用<code>openssl dhparam -out dhparam.pem 2048</code>生成，你也可以将 2048 改成 4096 ，但是这样会耗费你几个小时的时间来生成，而 2048 只需要几分钟。</p><p>然后就可以将前面创建的 nginx 站点配置文件移走，或者更改掉后缀名让nginx不读取。</p><p>但是不要删除，因为 Let’s Encrypt 的证书有效期只有 90 天，官方建议每 60 天重新生成一次，下次生成还是要这个配置文件。</p><h3 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h3><p>将前面创建的站点配置文件后缀更改为其他样式，新建一个配置文件</p><p>内容类似这样</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>   <span class="number">80</span>; <span class="comment">## 监听 IPv4 80 端口</span></span><br><span class="line">        <span class="attribute">server_name</span> example.com www.example.com;</span><br><span class="line">        <span class="attribute">server_tokens</span>   <span class="literal">off</span>;<span class="comment">#隐藏服务器信息</span></span><br><span class="line">        <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">"max-age=63072000; includeSubdomains; preload"</span>;<span class="comment">#HSTS</span></span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> https://coolrc.top/<span class="variable">$1</span> <span class="literal">permanent</span>; <span class="comment">#重定向到http</span></span><br><span class="line">        <span class="comment">#减少点击劫持</span></span><br><span class="line">        <span class="attribute">add_header</span> X-Frame-Options DENY;</span><br><span class="line">        <span class="comment">#禁止服务器自动解析资源类型</span></span><br><span class="line">        <span class="attribute">add_header</span> X-Content-Type-Options nosniff;</span><br><span class="line">        <span class="comment">#防XSS攻擊</span></span><br><span class="line">        <span class="attribute">add_header</span> X-Xss-Protection <span class="number">1</span>;</span><br><span class="line">         <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="comment">## 这里用 HTTPS 比较好，代理服务器和源服务器间也是加密通讯</span></span><br><span class="line">                <span class="attribute">proxy_pass</span> http://coolrc136.github.io/; <span class="comment">#我的博客地址，这里使用https会出问题</span></span><br><span class="line">                <span class="attribute">proxy_set_header</span> Accept-Encoding <span class="string">""</span>;</span><br><span class="line">                <span class="attribute">proxy_redirect</span>     <span class="literal">off</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   Host                       <span class="variable">$host</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   X-Real-IP               <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>   <span class="number">443</span> ssl http2; <span class="comment">## listen for ipv4; this line is default and implied</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>; <span class="comment">#禁止不安全的协议</span></span><br><span class="line">        <span class="attribute">ssl_ciphers</span>                EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;</span><br><span class="line">        <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">server_tokens</span>   <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">server_name</span> example.com www.example.com;</span><br><span class="line">      <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line">      <span class="attribute">ssl_stapling</span>               <span class="literal">on</span>;</span><br><span class="line">      <span class="attribute">ssl_stapling_verify</span>        <span class="literal">on</span>;</span><br><span class="line">        <span class="comment">## 这里路径为 fullchain.pem 文件的路径，文件可以随意放，确保位置正确即可</span></span><br><span class="line">        <span class="attribute">ssl_certificate</span> /root/www/certs/fullchain.pem;</span><br><span class="line">        <span class="comment">## 这里路径 和 fullchain.pem 文件的路径作用一样</span></span><br><span class="line">        <span class="comment">##赫尔曼密钥,使用openssl dhparam -out dhparam.pem 2048命令生成</span></span><br><span class="line">        <span class="attribute">ssl_dhparam</span> /root/www/certs/dhparam.pem;</span><br><span class="line">        <span class="comment">#减少点击劫持</span></span><br><span class="line">        <span class="attribute">add_header</span> X-Frame-Options DENY;</span><br><span class="line">        <span class="comment">#禁止服务器自动解析资源类型</span></span><br><span class="line">        <span class="attribute">add_header</span> X-Content-Type-Options nosniff;</span><br><span class="line">        <span class="comment">#防XSS攻擊</span></span><br><span class="line">        <span class="attribute">add_header</span> X-Xss-Protection <span class="number">1</span>;</span><br><span class="line">         <span class="attribute">location</span> /.well-known/acme-challenge &#123;</span><br><span class="line">           <span class="attribute">alias</span> /var/www/dehydrated;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="comment">## 这里用 HTTPS 比较好，代理服务器和源服务器间也是加密通讯</span></span><br><span class="line">                <span class="attribute">proxy_pass</span> http://coolrc136.github.io; <span class="comment">#这里使用https会出问题</span></span><br><span class="line">                <span class="attribute">proxy_set_header</span> Accept-Encoding <span class="string">""</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real_IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> User-Agent <span class="variable">$http_user_agent</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> referer <span class="string">"http://coolrc136.github.io<span class="variable">$request_uri</span>"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要注意的是，github pages 是支持 https 的，而且使用 https 会更安全，但是我将上游的网址填成 https 网址的话，网页会有时候直接跳转到上游的地址，绕过代理。</p><p>至此，博客反代配置成功，支持 http/2 ，使用 ECC 证书，支持 ALPN，在手机平台使用 chacha20 加密连接，pc平台使用 aes 加密，节省了性能。</p><p>但是正是由于这些新特性，博客仅支持新版本浏览器，比如 IE11 以下就是不能访问博客的，如果你的访问者大多使用旧版的浏览器，你需要慎重考虑是否要这样配置。</p><hr><p>参考资料：</p><p><a href="https://imququ.com/post/letsencrypt-certificate.html" target="_blank" rel="noopener">https://imququ.com/post/letsencrypt-certificate.html</a><br><a href="https://imququ.com/post/my-nginx-conf.html" target="_blank" rel="noopener">https://imququ.com/post/my-nginx-conf.html</a><br><a href="https://aotu.io/notes/2016/08/16/nginx-https/" target="_blank" rel="noopener">https://aotu.io/notes/2016/08/16/nginx-https/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://c1.staticflickr.com/9/8640/30280932405_35376236c5_z_d.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;国庆节回家没事干，研究了一下nginx配置，参考了 Jerry Qu的文章 &lt;a href=&quot;https://imququ.com/post/my-nginx-conf.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;本博客 Nginx 配置之完整篇&lt;/a&gt;,给我的 github pages 用nginx做了一个反代，顺便开启了 http/2 支持。
    
    </summary>
    
    
      <category term="linux" scheme="https://coolrc.me/tags/linux/"/>
    
      <category term="nginx" scheme="https://coolrc.me/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>校园网使用ipv6的SS免流</title>
    <link href="https://coolrc.me/2016/09/18/18231939/"/>
    <id>https://coolrc.me/2016/09/18/18231939/</id>
    <published>2016-09-18T15:19:39.000Z</published>
    <updated>2016-10-12T09:17:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多高校校园网ipv4都是限制流量的，像我们学校苦逼的校园网ipv4只有15G流量，根本没法下载东西啊，但是ipv6不计流量。利用这一点，可以通过ipv6连接SS走代理，这样校园网会识别你的流量都是走的ipv6，就不计流量了。只要对普通的SS配置文件稍作修改就可以愉快的免流啦。<a id="more"></a></p><p>其实很简单，通常SS配置文件是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;my_server_ip&quot;,</span><br><span class="line">    &quot;server_port&quot;:8388,</span><br><span class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;mypassword&quot;,</span><br><span class="line">    &quot;timeout&quot;:300,</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">    &quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们要做的事就是修改server一行的ip，将server行改成这样就行了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;server&quot;:&quot;::&quot;,</span><br></pre></td></tr></table></figure><p>然后在SS的客户端将原来的ipv4地址改为ipv6地址即可，要查看服务器ipv6地址，你可以去主机商的控制台查看，有的控制台不显示ipv6地址的，可以通过<code>ip addr</code>或者<code>ifconfig</code>命令查看。</p><h4 id="更新："><a href="#更新：" class="headerlink" title="更新："></a>更新：</h4><p>在 shadowsocks-libev 中这样只能让ss监听ipv6，要同时监听ipv4和ipv6，应该这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;server&quot;:[&quot;[::0]&quot;, &quot;0.0.0.0&quot;],</span><br></pre></td></tr></table></figure></p><p>至于 shadowsocks-libev 为何要这样，你可以参考这篇文章 <a href="https://linux.cn/article-7823-1.html" target="_blank" rel="noopener">https://linux.cn/article-7823-1.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多高校校园网ipv4都是限制流量的，像我们学校苦逼的校园网ipv4只有15G流量，根本没法下载东西啊，但是ipv6不计流量。利用这一点，可以通过ipv6连接SS走代理，这样校园网会识别你的流量都是走的ipv6，就不计流量了。只要对普通的SS配置文件稍作修改就可以愉快的免流啦。
    
    </summary>
    
    
      <category term="shadowsocks" scheme="https://coolrc.me/tags/shadowsocks/"/>
    
  </entry>
  
</feed>
